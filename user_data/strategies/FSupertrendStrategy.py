"""
Supertrend strategy:
* Description: Generate a 3 supertrend indicators for 'buy' strategies & 3 supertrend indicators for 'sell' strategies
               Buys if the 3 'buy' indicators are 'up'
               Sells if the 3 'sell' indicators are 'down'
* Author: @juankysoriano (Juan Carlos Soriano)
* github: https://github.com/juankysoriano/
*** NOTE: This Supertrend strategy is just one of many possible strategies using `Supertrend` as indicator. It should on any case used at your own risk.
          It comes with at least a couple of caveats:
            1. The implementation for the `supertrend` indicator is based on the following discussion: https://github.com/freqtrade/freqtrade-strategies/issues/30 . Concretelly https://github.com/freqtrade/freqtrade-strategies/issues/30#issuecomment-853042401
            2. The implementation for `supertrend` on this strategy is not validated; meaning this that is not proven to match the results by the paper where it was originally introduced or any other trusted academic resources
"""

import logging
from numpy.lib import math
from freqtrade.strategy import IStrategy, IntParameter
from pandas import DataFrame
import pandas_ta as ta
import numpy as np

import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib


class FSupertrendStrategy(IStrategy):
    # Buy params, Sell params, ROI, Stoploss and Trailing Stop are values generated by 'freqtrade hyperopt --strategy Supertrend --hyperopt-loss ShortTradeDurHyperOptLoss --timerange=20210101- --timeframe=1h --spaces all'
    # It's encourage you find the values that better suites your needs and risk management strategies

    INTERFACE_VERSION: int = 3
    # Buy hyperspace params:
    buy_params = {
        # "buy_ema": 200,
        # "buy_m1": 1,
        # "buy_m2": 2,
        # "buy_m3": 3,
        # "buy_p1": 10,
        # "buy_p2": 11,
        # "buy_p3": 12,
    }

    # Sell hyperspace params:
    sell_params = {
        # "sell_ema": 200,
        # "sell_m1": 1,
        # "sell_m2": 2,
        # "sell_m3": 3,
        # "sell_p1": 10,
        # "sell_p2": 11,
        # "sell_p3": 12,
    }

    # ROI table:
    # minimal_roi = {"0": 0.1, "30": 0.75, "60": 0.05, "120": 0.025}
    minimal_roi = {"0": 0.01, "30": 0.075, "60": 0.005, "120": 0.03}
    # minimal_roi = {"0": 1}

    # Stoploss:
    stoploss = -0.265
    can_short = True

    # Trailing stop:
    use_exit_signal = True
    trailing_stop = True
    trailing_stop_positive = 0.05
    trailing_stop_positive_offset = 0.1
    trailing_only_offset_is_reached = False

    timeframe = "1h"

    startup_candle_count = 200

    # buy_ema = IntParameter(190, 210, default=200, space="buy")
    # buy_m1 = IntParameter(1, 4, default=1)
    # buy_m2 = IntParameter(1, 4, default=2)
    # buy_m3 = IntParameter(1, 4, default=3)
    # buy_p1 = IntParameter(9, 15, default=10)
    # buy_p2 = IntParameter(9, 15, default=11)
    # buy_p3 = IntParameter(9, 15, default=12)

    # sell_ema = IntParameter(190, 210, default=200, space="sell")

    # sell_m1 = IntParameter(1, 4, default=1)
    # sell_m2 = IntParameter(1, 4, default=2)
    # sell_m3 = IntParameter(1, 4, default=3)
    # sell_p1 = IntParameter(9, 15, default=10)
    # sell_p2 = IntParameter(9, 15, default=11)
    # sell_p3 = IntParameter(9, 15, default=12)

    plot_config = {
        'main_plot': {
            'SUPERT_10_1.0': {'color': 'cyan'},
            'SUPERT_11_2.0': {'color': 'cyan'},
            'SUPERT_12_3.0': {'color': 'cyan'},
            'sell_ema_200': {'color': 'blue'},
            'emaLite': {'color': 'white'},

        }
    }

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:

        dataframe.ta.supertrend(length=10, multiplier=1, append=True)
        dataframe.ta.supertrend(length=11, multiplier=2, append=True)
        dataframe.ta.supertrend(length=12, multiplier=3, append=True)

        dataframe["emaBig"] = ta.EMA(dataframe, timeperiod=200)
        dataframe["emaLite"] = ta.EMA(dataframe, timeperiod=28)

        dataframe["adx"] = ta.ADX(dataframe)
        dataframe["plus_di"] = ta.PLUS_DI(dataframe)
        dataframe["minus_di"] = ta.MINUS_DI(dataframe)

        return dataframe

    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:

        overemaBig = (dataframe["close"] > dataframe["emaBig"])
        overemaBigShifted = (dataframe["close"].shift(1) > dataframe["emaBig"].shift(1))
        ruleemaLiteLong = (dataframe["close"] < dataframe["emaLite"])
        volumeOn = (dataframe["volume"] > 0)
        allSuperGreen = ((dataframe["SUPERTd_10_1.0"] == 1) & (dataframe["SUPERTd_11_2.0"] == 1) & (dataframe["SUPERTd_12_3.0"] == 1))
        notAllShiftedSuperGreen = ((dataframe["SUPERTd_10_1.0"].shift(1) == -1) | (dataframe["SUPERTd_11_2.0"].shift(1) == -1) | (dataframe["SUPERTd_12_3.0"].shift(1) == -1))
        dataframe.loc[
            (
                    True
                    & overemaBig
                    & overemaBigShifted
                    & ruleemaLiteLong
                    & allSuperGreen
                    # & notAllShiftedSuperGreen
                    & volumeOn
            )
            # |
            # (
            #         True
            #         & (qtpylib.crossed_above(dataframe["close"], dataframe["emaBig"]))
            #         & allSuperGreen
            #         & ruleemaLiteLong
            # )
            # |
            # (
            #         True
            #         & (qtpylib.crossed_above(dataframe["close"], dataframe["emaLite"]))
            #         & allSuperGreen
            #         & overemaBig
            #         & overemaBigShifted
            # )
            ,
            "enter_long",
        ] = 1

        belowemaBig = (dataframe["close"] < dataframe["emaBig"])
        belowemaBigShifted = (dataframe["close"].shift(1) < dataframe["emaBig"].shift(1))
        ruleemaLiteShort = (dataframe["close"] > dataframe["emaLite"])
        allSuperRed = ((dataframe["SUPERTd_10_1.0"] == -1) & (dataframe["SUPERTd_11_2.0"] == -1) & (dataframe["SUPERTd_12_3.0"] == -1))
        notAllShiftedSuperRed = ((dataframe["SUPERTd_10_1.0"].shift(1) == 1) | (dataframe["SUPERTd_11_2.0"].shift(1) == 1) | (dataframe["SUPERTd_12_3.0"].shift(1) == 1))

        dataframe.loc[
            (
                    True
                    & belowemaBig
                    & belowemaBigShifted
                    # & ruleemaLiteShort
                    & allSuperRed
                    # & notAllShiftedSuperRed
                    & volumeOn
            )
            # |
            # (
            #         True
            #         & (qtpylib.crossed_below(dataframe["close"], dataframe["emaBig"]))
            #         & allSuperRed
            #     # & ruleemaLiteShort
            # )
            # |
            # (
            #         True
            #         & (qtpylib.crossed_below(dataframe["close"], dataframe["emaLite"]))
            #         & allSuperRed
            #         & belowemaBig
            #         & belowemaBigShifted
            # )
            ,
            "enter_long",
        ] = 1

        return dataframe

    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe.loc[
            # (dataframe["supertrend1"] == "down")
            # | (dataframe["supertrend2"] == "down")
            # | (dataframe["supertrend3"] == "down")
            # |
            (qtpylib.crossed_above(dataframe["adx"], dataframe["plus_di"])),
            "exit_long",
        ] = 1

        dataframe.loc[
            # (dataframe["supertrend1"] == "up")
            # | (dataframe["supertrend2"] == "up")
            # | (dataframe["supertrend3"] == "up")
            # |
            (qtpylib.crossed_below(dataframe["adx"], dataframe["minus_di"])),
            "exit_short",
        ] = 1

        return dataframe
